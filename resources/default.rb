actions :add, :run
default_action :add

attribute :name, :kind_of => String, :name_attribute => true, :required => true
attribute :directory, :kind_of => String, :required => true
attribute :incremental_backup, :kind_of => [ TrueClass, FalseClass ]
attribute :stay_in_filesystem, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['stay_in_filesystem']
attribute :create_lvm_snapshot, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['create_lvm_snapshot']
attribute :lvm_volume_name, :kind_of => String, :default => node['tartarus']['lvm_volume_name']
attribute :snapshot_dir, :kind_of => String, :default => node['tartarus']['snapshot_dir']
attribute :lvm_mount_options, :kind_of => String, :default => node['tartarus']['lvm_mount_options']
attribute :lvm_snapshot_size, :kind_of => String, :default => node['tartarus']['lvm_snapshot_size']
attribute :assembly_method, :kind_of => String, :equal_to => ["tar", "afio"], :default => node['tartarus']['assembly_method']
attribute :tar_options, :kind_of => String, :default => node['tartarus']['tar_options']
attribute :compression_method, :kind_of => String, :equal_to => ["none", "gzip", "bzip", "pbzip"], :default => node['tartarus']['compression_method']
attribute :storage_method, :equal_to => ["FILE", "FTP", "SIMULATE", "CUSTOM"], :default => node['tartarus']['storage_method']
attribute :storage_file_dir, :kind_of => String, :default => node['tartarus']['storage_file_dir']
attribute :storage_ftp_server, :kind_of => String, :default => node['tartarus']['storage_ftp_server']
attribute :storage_ftp_dir, :kind_of => String, :default => node['tartarus']['storage_ftp_dir']
attribute :storage_ftp_user, :kind_of => String, :default => node['tartarus']['storage_ftp_user']
attribute :storage_ftp_password, :kind_of => String, :default => node['tartarus']['storage_ftp_password']
attribute :storage_ftp_use_ssl, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['storage_ftp_use_ssl']
attribute :storage_ftp_ssl_insecure, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['storage_ftp_ssl_insecure']
attribute :storage_ftp_use_sftp, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['storage_ftp_use_sftp']
attribute :storage_chunk_size, :kind_of => String, :default => node['tartarus']['storage_chunk_size']
attribute :incremental_stacking, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['incremental_stacking']
attribute :exclude, :kind_of => String, :default => node['tartarus']['exclude']
attribute :exclude_files, :kind_of => String, :default => node['tartarus']['exclude_files']
attribute :exclude_filename_patterns, :kind_of => String, :default => node['tartarus']['exclude_filename_patterns']
attribute :encrypt_symmetrically, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['encrypt_symmetrically']
attribute :encrypt_asymmetrically, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['encrypt_asymmetrically']
attribute :encrypt_key_id, :kind_of => String, :default => node['tartarus']['encrypt_key_id']
attribute :encrypt_keyring, :kind_of => String, :default => node['tartarus']['encrypt_keyring']
attribute :encrypt_gpg_options, :kind_of => String, :default => node['tartarus']['encrypt_gpg_options']
attribute :limit_disk_io, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['limit_disk_io']
attribute :check_for_update, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['check_for_update']
attribute :file_list_creation, :kind_of => [ TrueClass, FalseClass ], :default => node['tartarus']['file_list_creation']
attribute :file_list_directory, :kind_of => String, :default => node['tartarus']['file_list_directory']

attribute :hooks_template_cookbook, :kind_of => String, :default => node['tartarus']['hooks_template_cookbook']
attribute :pre_process_hook, :kind_of => String, :default => node['tartarus']['pre_process_hook']
attribute :post_process_hook, :kind_of => String, :default => node['tartarus']['post_process_hook']
attribute :pre_configverify_hook, :kind_of => String, :default => node['tartarus']['pre_configverify_hook']
attribute :post_configverify_hook, :kind_of => String, :default => node['tartarus']['post_configverify_hook']
attribute :pre_cleanup_hook, :kind_of => String, :default => node['tartarus']['pre_cleanup_hook']
attribute :post_cleanup_hook, :kind_of => String, :default => node['tartarus']['post_cleanup_hook']
attribute :pre_freeze_hook, :kind_of => String, :default => node['tartarus']['pre_freeze_hook']
attribute :post_freeze_hook, :kind_of => String, :default => node['tartarus']['post_freeze_hook']
attribute :pre_store_hook, :kind_of => String, :default => node['tartarus']['pre_store_hook']
attribute :post_store_hook, :kind_of => String, :default => node['tartarus']['post_store_hook']
attribute :debug_hook, :kind_of => String, :default => node['tartarus']['debug_hook']
attribute :pre_find_hook, :kind_of => String, :default => node['tartarus']['pre_find_hook']
attribute :post_find_hook, :kind_of => String, :default => node['tartarus']['post_find_hook']
attribute :pre_tar_hook, :kind_of => String, :default => node['tartarus']['pre_tar_hook']
attribute :post_find_hook, :kind_of => String, :default => node['tartarus']['post_find_hook']
attribute :pre_compression_hook, :kind_of => String, :default => node['tartarus']['pre_compression_hook']
attribute :post_compression_hook, :kind_of => String, :default => node['tartarus']['post_compression_hook']
attribute :pre_compression_hook, :kind_of => String, :default => node['tartarus']['pre_compression_hook']
attribute :post_compression_hook, :kind_of => String, :default => node['tartarus']['post_compression_hook']
attribute :pre_storage_hook, :kind_of => String, :default => node['tartarus']['pre_storage_hook']
attribute :post_storage_hook, :kind_of => String, :default => node['tartarus']['post_storage_hook']

attribute :encrypt_passphrase, :kind_of => String, :default => node['tartarus']['encrypt_passphrase']

attribute :cron_month, :kind_of => String, :default => node['tartarus']['cron']['month']
attribute :cron_weekday, :kind_of => String, :default => node['tartarus']['cron']['weekday']
attribute :cron_day, :kind_of => String, :default => node['tartarus']['cron']['day']
attribute :cron_hour, :kind_of => String, :default => node['tartarus']['cron']['hour']
attribute :cron_minute, :kind_of => String, :default => node['tartarus']['cron']['minute']

attr_accessor :exists